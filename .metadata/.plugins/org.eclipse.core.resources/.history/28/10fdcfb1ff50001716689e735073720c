package de.unikassel.ir.vsr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

public class PhraseSearchIndex extends InvertedIndexImpl implements PhraseSearch {

	@Override
	public Map<Document, List<Integer>> searchPhrase(List<String> phrase) {

		/* documents containing phrase */
		Map<Document, List<Integer>> result = new HashMap<>();

		/* ensuring phrase not to be null and phrase has at least one element */
		if (phrase == null || phrase.isEmpty())
			return result;

		List<TreeSet<Pair>> lists = this.createSortedSets(phrase);
		
		for(TreeSet<Pair> list : lists)
			System.out.println(list);

		//Iterator<Pair> firstTerm = lists.get(0).iterator();

//		while (firstTerm.hasNext()) {
//
//			boolean match = true;
//
//			for (int j = 1; j < lists.size(); j++) {
//
//				Iterator<Pair> jthTerm = lists.get(j).iterator();
//			}
//		}
		return result;

	}

	private List<TreeSet<Pair>> createSortedSets(List<String> phrase) {
		List<TreeSet<Pair>> lists = new ArrayList<>();

		TreeSet<Pair> sortedSet = new TreeSet<>();

		for (String term : phrase) {

			for (TokenOccurrence occ : tokenHash.get(term).getTokenOccurrenceList()) {
				for (int position : occ.getPositions()) {
					sortedSet.add(new Pair(occ.getDocument(), position));
				}
			}
		}

		return lists;

	}

	private class Pair implements Comparable<Pair> {

		private Document doc;
		private int position;

		public Pair(Document doc, int position) {
			this.doc = doc;
			this.position = position;
		}

		public Document getDocument() {
			return this.doc;
		}

		public int getPosition() {
			return this.position;
		}

		@Override
		public int compareTo(Pair o) {
			int comp = this.getDocument().getId().compareTo(o.getDocument().getId());
			if (comp != 0) {
				return comp;
			} else {
				return this.getPosition() > o.getPosition() ? +1 : this.getPosition() < o.getPosition() ? -1 : 0;
			}

		}
	}

	public PhraseSearchIndex(Corpus corpus) {
		super(corpus);
	}

	@Override
	public Map<Document, List<Integer>> searchPhrase(String phrase) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<String> getContext(String phrase, Document doc, int pos) {
		// TODO Auto-generated method stub
		return null;
	}

}
