package de.unikassel.ir.vsr;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class HTMLDocument extends DocumentImpl {

	/** global reference for the set containing all stop words */
	public static HashSet<String> stopwords = createStopWordList();

	private URL url;

	private Set<URL> links;

	private org.jsoup.nodes.Document doc;

	/**
	 * calculates a set of stop words that are already stemmed
	 * @return set of stemmed stop words
	 */
	private static HashSet<String> createStopWordList() {
		/* check whether set of stop words is already created */
		if (HTMLDocument.stopwords == null) {
			
			/* porter stemmer */
			Stemmer stemmer = new Stemmer();
			
			/* contains stemmed stop words */
			HashSet<String> stopWordsList = new HashSet<String>();
			try {
				
				/* scanner to read file of stop words*/
				Scanner sc = new Scanner(new File("resources/englishST.txt"), "UTF-8");
				while (sc.hasNext()) {
					String stopword = sc.next().toLowerCase().trim().replaceAll("[^A-Za-z0-9 -]", "");
					stemmer.add(stopword.toCharArray(), stopword.length());
					stemmer.stem();
					String token = stemmer.toString();
					stopWordsList.add(token);
				}
				sc.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			return stopWordsList;
		}

		return HTMLDocument.stopwords;
	}

	public HTMLDocument(URL url) {
		this.url = url;
	}

	@Override
	public void read(InputStream input) throws IOException {

		/* represents the current position of scanned words */
		int currentPosition = 1;

		this.doc = Jsoup.parse(input, "UTF-8", this.url.toString());
		doc.setBaseUri(this.url.toString());

		Stemmer stemmer = new Stemmer();
		/* initialization of the map */
		this.termsIndex = new HashMap<>();

		Elements elements = doc.getAllElements();
		String text = doc.text();

		for (Element element : elements) {
			if (element.attr("title") != null) {
				text += " " + element.attr("title");
			}
			if (element.attr("alt") != null) {
				text += element.attr("alt");
			}
		}

		for (String term : text.toLowerCase().trim().replaceAll("[^A-Za-z0-9 -]", "").split("\\s+|-")) {
			stemmer.add(term.toCharArray(), term.length());
			stemmer.stem();
			String token = stemmer.toString();
			if (!HTMLDocument.stopwords.contains(token)) {
				ArrayList<Integer> positionsOfToken = this.termsIndex.getOrDefault(token, new ArrayList<Integer>());
				positionsOfToken.add(currentPosition);
				this.termsIndex.put(token, positionsOfToken);
				currentPosition++;
				this.size++;
			}
		}

	}

	public Set<URL> getExtractedLinks() {
		if (links == null) {
			links = new HashSet<>();
			Elements linkElements = this.doc.select("a[href]");

			for (Element linkElement : linkElements) {
				try {
					System.out.println(linkElement.attr("abs:href").toString());
					links.add(new URL(linkElement.attr("abs:href").toString()));
				} catch (MalformedURLException e) {
					e.printStackTrace();
				}
			}
		}

		return this.links;
	}

}
